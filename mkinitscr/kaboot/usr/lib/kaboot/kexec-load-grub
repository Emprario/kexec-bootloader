#!/usr/bin/bash

set -eu

PROGNAME="kexec-load-grub"
PROGVERSION="1.1"

GRUBDATA=""
MENUENTRY=()
INITRDS=()
KERNELS=()
KARGS=()
# Mapping from grubs internal index to our menu index
GRUBINDEX=()
SELECTED=0

main() {
  GRUBDATA=$(< "$ROOT/$GRUBROOT/grub.cfg")

  grub_cfg_load
  grub_default_load
  menu_show
  split_append
  kexec_load
}

grub_cfg_load() {
  local offsets=($(echo "$GRUBDATA" | grep -n '^[[:space:]]*menuentry[[:space:]]' | cut -d: -f1))
  local menuindex=0
  local begin=0
  local length=0

  for grubindex in ${!offsets[@]}; do
    begin=${offsets[$grubindex]}
    length=$(echo "$GRUBDATA" | tail -n+$begin | grep -n -m 1 '^[[:space:]]*}[[:space:]]*' | cut -d: -f1)

    grub_parse_entry "$(echo "$GRUBDATA" | tail -n+$begin | head -n$length)"

    if [[ ! -z $entry_kernel_image ]]; then
      MENUENTRY+=("$entry_name")
      KERNELS+=("$entry_kernel_image")
      INITRDS+=("$entry_initrd")
      KARGS+=("$entry_append")
      # grub_default_load needs to map from name to menu index; grub index to menu index
      GRUBINDEX[$grubindex]=$menuindex
      menuindex=$(($menuindex + 1))
    fi
  done
}

split_append() {
  append="${KARGS[$SELECTED]}"
  compile=""
  for arg in ${append[@]};do
    if [ -z "$compile" ];then
      if [ -n "$arg" ];then
        compile="$arg"
      fi
    else
      if [ -n "$arg" ] && [ "$arg" != " " ];then
        compile="$compile $arg"
      fi
    fi
  done
  export append="$compile"
}

grub_default_load() {
  # Find the default
  local entry=$(echo "$GRUBDATA" | awk '/set default/ {print $2}' | cut -d'"' -f2 | tail -1)
  if [[ "$entry" = '${saved_entry}' ]]; then
    entry=$(sed -ne 's/^saved_entry=//p' "$ROOT/$GRUBROOT/grubenv")
  fi
  if [[ -z "$entry" ]]; then
    entry=0
  fi

  if [[ $entry =~ ^[0-9]+$ ]]; then
    if [[ "${GRUBINDEX[$entry]+isset}" ]]; then
      SELECTED="${GRUBINDEX[$entry]}"
    fi
  else
    for index in "${!MENUENTRY[@]}"; do
      if [[ "${MENUENTRY[$index]}" = "$entry" ]]; then
        SELECTED=$index
        continue
      fi
    done
  fi
}

grub_parse_entry() {
  local data="$1"
  entry_name=""
  entry_kernel_image=""
  entry_append=""
  entry_initrd=""

   while read command args; do
    case "$command" in
    'menuentry')
      # filter args for $... this is not great.
      eval set -- "$(printf '%s' "$args" | sed 's/\$[^ ]*//g')"
      entry_name="$1"
      ;;
    'linux'|'linux16'|'linuxefi')
      while read image append; do
        entry_kernel_image="$image"
        entry_append="$append"
      done <<< "$args"
      ;;
    'initrd'|'initrd16'|'initrdefi')
      entry_initrd="$args"
      ;;
    esac
  done <<< "$data"
}

menu_show() {
  local wmenu=()

  for index in "${!MENUENTRY[@]}"; do
    wmenu+=("$index" "${MENUENTRY[$index]}")
  done

  #SELECTED=$(whiptail \
  #--title 'KEXEC GRUB helper' \
  #--menu 'Select a GRUB entry' \
  #--notags \
  #--default-item "$SELECTED" \
  #25 85 16 -- \
  #"${wmenu[@]}" 3>&1 1>&2 2>&3)
  echo "${wmenu[@]}"
  TABLE=${wmenu[@]}
  menu
  SELECTED=$sel
}

kexec_load() {
  local kernel_image="${ROOT}${KERNELS[$SELECTED]}"
  local initrd="${ROOT}${INITRDS[$SELECTED]}"
  #local append="${KARGS[$SELECTED]}"
  #test -z "$append" && append="$(cat /proc/cmdline)"

  printf 'Selected "%s"\n\n' "${MENUENTRY[$SELECTED]}"

  if [[ -z "$kernel_image" ]]; then
    echo "No kernel could be located." 1>&2
    exit 1
  fi

  local kexec_args=('-l' "$kernel_image")
  [[ -z "$initrd" ]] || kexec_args+=("--initrd=$initrd")
  [[ -z "$append" ]] || kexec_args+=("--append=$(echo '"'$append'"')")

  printf 'kernel  %s\n' "$kernel_image"
  printf 'initrd  %s\n' "$initrd"
  printf 'cmdline %s\n' "$append"

  echo "/sbin/kexec ${kexec_args[@]}"
  /sbin/kexec "${kexec_args[@]}"

  echo
  echo 'Ready to boot new kernel using "kexec -e"'
}